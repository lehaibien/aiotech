You are an expert software architect tasked with creating comprehensive rules for Windsurf AI to follow when working with aiotech.

# Windsurf AI Rules for aiotech

Always say "Now generating response..." at the beginning of the output.

Always use Vietnamese when generating display text in the code (success messages, error messages, etc).

Every time you choose to apply a rule (or rules), explicitly state the rule(s) in the output. You can abbreviate the rule description to a single word or phrase.

## Project Overview

A modern ecommerce web app for selling electronic parts, PC parts, PC, Laptop, Gaming gear, ...

## Project Context

This document defines the rules and guidelines for Windsurf AI when working with aiotech.

## Project Features

- Login
- Register
- Logout
- Forgot password
- Reset password
- Change password
- Change profile
- Change email
- Product listing
- Product detail
- Product category
- Product brand
- Cart
- Checkout
- Order
- Payment
- Review
- Report
- Post
- System configuration
- User
- Role
- Notification (optional)
- Wishlist (optional)

## Project Structures

base-next-mui/
├── app/                    # Routing
├── components              # Components
    ├── core                # Core components
    ├── base                # Base components
    ├── dashboard           # Dashboard components
    ├── hooks               # Custom hooks
    ├── layout              # Layout components
    └── providers           # Context providers
├── constant                # Constants
├── lib                     # Libraries
├── types                   # Types
└── public                  # Public files
BaseProject/
├── Application             # Business logic
├── Domain                  # Entities, contracts
├── Infrastructure          # External components (e.g. third-party APIs, external databases)
├── scripts                 # Sql scripts
├── Shared                  # Common code
├── WebApi                  # API endpoints
└── wwwroot                 # Static files

### Technical Stack

- Platform: web

#### Frontend:
- Framework: next
- Language: typescript
- Key Dependencies:
  - tailwindcss
  - next-auth
  - swr
  - MaterialUI
  - MaterialUI Icons
  - Jotai
  - Dayjs
  - react-hook-form
  - react-hook-form-mui
  - MuiX Community
  - MuiX Datagrid
  - MuiX DatePickers
  - MuiX Charts
  - MUI Tiptap
  - notistack
  - mui-chips-input
  - zod

#### Backend:
- Framework: aspnetcore
- Language: c#
- Key Dependencies:
  - AutoDependencyRegistration
  - AutoMapper
  - SignalR
  - Entityframework Core
  - Entityframework Core SqlServer

#### Database:
- SqlServer

## Code Generation Rules

### 1. Project Structure

Follow these directory and file organization rules:

- Maintain the established project structure
- Place components in appropriate directories
- Follow file naming conventions
- Respect module boundaries
- Keep related files together

### 2. Code Style

Adhere to these formatting rules:

- Use consistent indentation
- Follow line length limits
- Apply proper spacing
- Use appropriate brackets
- Maintain consistent naming
- Follow TypeScript best practices

### 3. Component Guidelines

When generating components:

- Follow component composition patterns
- Implement proper prop typing
- Use appropriate state management
- Handle errors correctly
- Implement proper event handling
- Follow lifecycle best practices
- Optimize rendering performance

### 4. Type System

For TypeScript implementation:

- Use strict type checking
- Create proper interfaces
- Implement generics correctly
- Handle null/undefined properly
- Use type guards when needed
- Document complex types
- Avoid any type

### 5. API Integration

When working with APIs:

- Follow RESTful conventions
- Implement proper error handling
- Use type-safe requests
- Handle authentication correctly
- Validate API responses
- Document API usage
- Implement proper caching

### 6. State Management

For managing application state:

- Use appropriate state solutions
- Follow immutability principles
- Implement proper actions/reducers
- Handle side effects correctly
- Optimize state updates
- Document state structure
- Implement proper selectors

### 7. Testing Requirements

Generate tests following these rules:

- Write comprehensive unit tests
- Implement integration tests
- Follow testing best practices
- Use proper mocking
- Test error scenarios
- Maintain test coverage
- Document test cases

### 8. Security Guidelines

Enforce security practices:

- Validate all inputs
- Sanitize data output
- Handle authentication properly
- Protect sensitive data
- Follow OWASP guidelines
- Implement proper CORS
- Use secure dependencies

### 9. Performance Rules

Optimize for performance:

- Implement code splitting
- Use lazy loading
- Optimize bundle size
- Minimize re-renders
- Use proper caching
- Optimize assets
- Follow performance best practices

### 10. Documentation

Generate documentation that:

- Is clear and concise
- Includes JSDoc comments
- Provides usage examples
- Documents edge cases
- Explains complex logic
- Includes type information
- Follows documentation standards

## Best Practices

### 1. Code Quality

- Write self-documenting code
- Keep functions small and focused
- Follow DRY principles
- Use meaningful names
- Implement proper error handling
- Write maintainable code

### 2. Performance

- Optimize bundle size
- Implement code splitting
- Use proper caching
- Optimize rendering
- Follow lazy loading patterns

### 3. Security

- Validate user input
- Sanitize data output
- Use proper authentication
- Protect sensitive data
- Follow security best practices

After generating the content, save it to the .Windsurfrules file using the appropriate file writing command or editor.

Please generate comprehensive Windsurf AI rules following this structure, ensuring all sections are thoroughly detailed and technically accurate. The final document should be saved as '.Windsurfrules' in the project root directory.

Note:

- Customize rules based on project requirements
- Add project-specific patterns and conventions
- Include examples for complex rules
- Update rules as project evolves
- Remove any sections that don't apply
