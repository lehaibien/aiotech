name: aiotech_prod
services:
  frontend:
    build: ./Frontend
    container_name: aiotech_web
    networks:
      - frontend
    environment:
      - NEXT_PUBLIC_API_URL=https://api.aiotech.cloud/
      - NEXT_PUBLIC_FRONTEND_URL=https://aiotech.cloud/
      - AUTH_URL=https://aiotech.cloud/
      - AUTH_SECRET=${AUTH_SECRET}
      - AUTH_GOOGLE_ID=${AUTH_GOOGLE_ID}
      - AUTH_GOOGLE_SECRET=${AUTH_GOOGLE_ID}
      - AUTH_FACEBOOK_ID=${AUTH_GOOGLE_ID}
      - AUTH_FACEBOOK_SECRET=${AUTH_GOOGLE_ID}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`aiotech.cloud`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=myresolver"
      - "traefik.http.services.frontend.loadbalancer.server.port=2400"
  backend:
    build: ./Backend/
    container_name: aiotech_api
    environment:
      - ConnectionStrings__DefaultConnection=Server=database;Database=AioTech;User Id=sa;Password=${DB_PASSWORD};Trusted_Connection=false;TrustServerCertificate=true;MultipleActiveResultSets=true
      - RedisConnectionString=redis:6379
      - SEQ_URL=http://seq:80
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:5554
      - BE_StaticUrl=https://api.aiotech.cloud/static
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_started
      seq:
        condition: service_started
    networks:
      - backend
    volumes:
      - wwwroot:/app/wwwroot
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`api.aiotech.cloud`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls.certresolver=myresolver"
      - "traefik.http.services.backend.loadbalancer.server.port=5554"

  seq:
    image: datalust/seq:latest
    container_name: aiotech_seq
    environment:
      - ACCEPT_EULA=Y
    networks:
      - backend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.seq.rule=Host(`log.aiotech.cloud`)"
      - "traefik.http.routers.seq.entrypoints=websecure"
      - "traefik.http.routers.seq.tls.certresolver=myresolver"
      - "traefik.http.services.seq.loadbalancer.server.port=80"

  redis:
    image: redis:latest
    container_name: aiotech_redis
    command: 
      - redis-server 
      - --maxmemory 1GB
      - --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - backend

  database:
    image: "mcr.microsoft.com/mssql/server:2019-latest"
    container_name: aiotech_db
    ports:
      - "1433:1433"
    environment:
      - TZ=Asia/Ho_Chi_Minh
      - MSSQL_PID=Express
      - MSSQL_SA_PASSWORD=${DB_PASSWORD}
      - MSSQL_MEMORY_LIMIT_MB=1024
      - MSSQL_TEMPDB_MEMORY_OPTIMIZED=ON
      - ACCEPT_EULA="Y"
    networks:
      - backend
    volumes:
      - database-data:/var/opt/mssql
    healthcheck:
      test: ["CMD", "sqlcmd", "-U", "sa", "-P", "${DB_PASSWORD}", "-Q", "SELECT 1"]
      interval: 5s
      timeout: 30s
      retries: 5

  umami:
    image: ghcr.io/umami-software/umami:postgresql-latest
    container_name: aiotech_umami
    environment:
      DATABASE_URL: postgresql://umami:umami@db:5432/umami
      DATABASE_TYPE: postgresql
      APP_SECRET: ${UMAMI_SECRET}
    depends_on:
      db:
        condition: service_healthy
    init: true
    restart: always
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "curl http://localhost:3000/api/heartbeat"]
      interval: 5s
      timeout: 5s
      retries: 5
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.umami.rule=Host(`analytics.aiotech.cloud`)"
      - "traefik.http.routers.umami.entrypoints=websecure"
      - "traefik.http.routers.umami.tls.certresolver=myresolver"
      - "traefik.http.services.umami.loadbalancer.server.port=3000"
  db:
    image: postgres:15-alpine
    container_name: aiotech_umami_db
    environment:
      POSTGRES_DB: umami
      POSTGRES_USER: umami
      POSTGRES_PASSWORD: umami
    volumes:
      - umami-db-data:/var/lib/postgresql/data
    restart: always
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  reverse-proxy:
    image: traefik:v3.1
    container_name: aiotech_traefik
    command:
      - "--entrypoints.web.http2.maxConcurrentStreams=50"  # Reduced from 100
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=lehaibien321@gmail.com"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
    ports:
      - "80:80"
      - "443:443"
      # for traefik dashboard
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - letsencrypt:/letsencrypt
    networks:
      - backend
      - frontend
    deploy:
      resources:
        limits:
          cpus: '0.4'
          memory: 256M

volumes:
  database-data:
  wwwroot:
  redis_data:
  umami-db-data:
  letsencrypt:

networks:
  backend:
    driver: bridge
  frontend:
    driver: bridge
